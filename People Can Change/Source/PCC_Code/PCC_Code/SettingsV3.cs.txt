using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RimWorld;
using UnityEngine;
using Verse;

namespace PCC_Code
{
    public class PCCSettings : ModSettings
    {
		public float maxTraits = 4;
        public float minTraits = 1;
        public float freqChange = 10;
        public float freqRemove = 10; // chance for event to occur, out of 10
        public bool sexualitiesAllowedToChange = false; // defaults to false by verdict of friends more into social justice than me
        public bool moddedTraits = true;
        public bool usingNewSelector = false;
        public List<string> disabledTraits = new List<string>();
        public List<TraitDef> disabledDefs {
            get {
                List<TraitDef> traits = new List<TraitDef>();
                foreach (string defName in disabledTraits) {
                    TraitDef add = DefDatabase<TraitDef>.GetNamedSilentFail(defName);
                    if (add != null) {
                        traits.Add(add);
                    }
                }
                return traits.OrderBy(item => item.defName).ToList();
            }
        }
        //public List<string> unloadedTraits = new List<string>();
        public bool hideAllowed = true; // not a saved value, just used for remembering whether the list is minimized, always starts minimized to ease clutter
        public bool hideDisabled = true; // see above

        public bool doOptimistDepressive = true;

        public override void ExposeData()
        {
            base.ExposeData();
			Scribe_Values.Look(ref maxTraits, "maxTraits", 4f);
            Scribe_Values.Look(ref minTraits, "minTraits", 1f);
            Scribe_Values.Look(ref maxTraits, "FreqChange", 10f);
            Scribe_Values.Look(ref minTraits, "FreqRemove", 10f);
            Scribe_Values.Look(ref sexualitiesAllowedToChange, "gayAllowedToChange", false); // the tag is called gay as a holdover from previous versions, so it's save-compatible
            Scribe_Values.Look(ref moddedTraits, "moddedTraits", true);
            Scribe_Values.Look(ref usingNewSelector, "usingNewSelector", false);
            Scribe_Values.Look(ref doOptimistDepressive, "doOptimistDepressive", true);
            Scribe_Collections.Look(ref disabledTraits, "disabledTraits", LookMode.Value);
            if (disabledTraits == null) disabledTraits = new List<string>();
            //Scribe_Collections.Look(ref unloadedTraits, "unloadedTraits", LookMode.Value);
        }
    }
    class PCC_Mod : Mod
    {
        //private bool recheckDefList = true;
        public static Vector2 scrollPosition = new Vector2();
        public static PCCSettings settings;
        public PCC_Mod(ModContentPack content) : base(content)
        {
            settings = GetSettings<PCCSettings>();
        }
        public override string SettingsCategory() => "PCC_ModTitle".Translate();
        public override void DoSettingsWindowContents(Rect inRect) {
            Listing_Standard ls = new Listing_Standard();
            Rect rect = new Rect(inRect.x, inRect.y, inRect.width, inRect.height);
            Rect rect2 = new Rect(0f, 0f, inRect.width - 16f, inRect.height + DefDatabase<TraitDef>.AllDefs.Count() * 55); //  + DefDatabase<TraitDef>.AllDefs.Count() * 55
            Widgets.BeginScrollView(rect, ref scrollPosition, rect2, true);
            ls.Begin(rect2);
            ls.Label("PCC_MaxTraitsExplanation".Translate());
            settings.maxTraits = ls.Slider(settings.maxTraits, settings.minTraits, 10);
            ls.Label("PCC_CurrentValue".Translate() + ((int)settings.maxTraits).ToString());
            
            ls.Label("PCC_MinTraitsExplanation".Translate());
            settings.minTraits = ls.Slider(settings.minTraits, 0, 3);
            ls.Label("PCC_CurrentValue".Translate() + ((int)settings.minTraits).ToString());
            
            ls.Label("PCC_ChangeFreq".Translate() + ((int)settings.freqChange).ToString());
            settings.freqChange = ls.Slider(settings.freqChange, 0, 10);
            ls.Label("PCC_RemoveFreq".Translate() + ((int)settings.freqRemove).ToString());
            settings.freqRemove = ls.Slider(settings.freqRemove, 0, 10);

            ls.CheckboxLabeled("PCC_DoOptimistDepressive".Translate(), ref settings.doOptimistDepressive);

            ls.Label("PCC_OddsExplanation".Translate());
            if (!settings.usingNewSelector) { // old trait selector
                ls.CheckboxLabeled("PCC_AllowSexTraitsSimple".Translate(), ref settings.sexualitiesAllowedToChange);
                ls.CheckboxLabeled("PCC_UseModdedTraitsSimple".Translate(), ref settings.moddedTraits);
                if (ls.ButtonText("PCC_AdvancedSettings".Translate())) {
                    settings.usingNewSelector = true;
                }
            }
            else { // new trait selector
                /*if (recheckDefList) {
                    settings.disabledDefs = new List<TraitDef>();
                    foreach (string defName in settings.disabledTraits) {
                        TraitDef add = DefDatabase<TraitDef>.GetNamedSilentFail(defName);
                        if (add != null) {
                            settings.disabledDefs.Add(add);
                        }
                        recheckDefList = false;
                    }
                }*/
                ls.Label("PCC_Eligible".Translate());
                if (settings.hideAllowed) {
                    if (ls.ButtonText("PCC_Show".Translate())) {
                        settings.hideAllowed = false;
                    }
                }
                else {
                    if (ls.ButtonText("PCC_Hide".Translate())) {
                        settings.hideAllowed = true;
                    }
                    GUI.color = Color.green;
                    foreach (TraitDef def in DefDatabase<TraitDef>.AllDefs.OrderBy(item => item.defName).ToList()) {
                        if (!settings.disabledDefs.Contains(def)) {
                            //ls.Label(def.defName + " : " + def.label);
                            if (ls.ButtonText(def.defName)) {
                                settings.disabledTraits.Add(def.defName);
                                //recheckDefList = true;
                            }
                        }
                    }
                    GUI.color = Color.white;
                }
                ls.Label("PCC_Ineligible".Translate());
                List<TraitDef> toRemove = new List<TraitDef>();
                if (settings.hideDisabled) {
                    if (ls.ButtonText("PCC_Show".Translate())) {
                        settings.hideDisabled = false;
                    }
                }
                else {
                    if (ls.ButtonText("PCC_Hide".Translate())) {
                        settings.hideDisabled = true;
                    }
                    GUI.color = Color.red;
                    foreach (TraitDef def in settings.disabledDefs) {
                        //ls.Label(def.defName + " : " + def.label);
                        if (ls.ButtonText(def.defName)) {
                            toRemove.Add(def); // can't modify disabledTraits within the foreach loop
                            //recheckDefList = true;
                        }
                    }
                    GUI.color = Color.white;
                }
                foreach (TraitDef def in toRemove) { settings.disabledTraits.Remove(def.defName); }
                ls.Label("PCC_SomeTraitsStillChange".Translate());
                if (ls.ButtonText("PCC_SimpleSettings".Translate())) {
                    settings.usingNewSelector = false;
                }
            }
            //settings.disabledDefs = settings.disabledDefs.OrderBy(item => item.defName).ToList();
            settings.Write();
            ls.End();
            Widgets.EndScrollView();
        }

    }
}
